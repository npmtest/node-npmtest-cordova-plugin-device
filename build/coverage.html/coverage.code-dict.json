{"/home/travis/build/npmtest/node-npmtest-cordova-plugin-device/test.js":"/* istanbul instrument in package npmtest_cordova_plugin_device */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-device/lib.npmtest_cordova_plugin_device.js":"/* istanbul instrument in package npmtest_cordova_plugin_device */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cordova_plugin_device = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cordova_plugin_device = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-device/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cordova-plugin-device && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cordova_plugin_device */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cordova_plugin_device\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cordova_plugin_device.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cordova_plugin_device.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cordova_plugin_device.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cordova_plugin_device.__dirname + '/lib.npmtest_cordova_plugin_device.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-device/node_modules/cordova-plugin-device/www/device.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\nvar argscheck = require('cordova/argscheck'),\n    channel = require('cordova/channel'),\n    utils = require('cordova/utils'),\n    exec = require('cordova/exec'),\n    cordova = require('cordova');\n\nchannel.createSticky('onCordovaInfoReady');\n// Tell cordova channel to wait on the CordovaInfoReady event\nchannel.waitForInitialization('onCordovaInfoReady');\n\n/**\n * This represents the mobile device, and provides properties for inspecting the model, version, UUID of the\n * phone, etc.\n * @constructor\n */\nfunction Device() {\n    this.available = false;\n    this.platform = null;\n    this.version = null;\n    this.uuid = null;\n    this.cordova = null;\n    this.model = null;\n    this.manufacturer = null;\n    this.isVirtual = null;\n    this.serial = null;\n\n    var me = this;\n\n    channel.onCordovaReady.subscribe(function() {\n        me.getInfo(function(info) {\n            //ignoring info.cordova returning from native, we should use value from cordova.version defined in cordova.js\n            //TODO: CB-5105 native implementations should not return info.cordova\n            var buildLabel = cordova.version;\n            me.available = true;\n            me.platform = info.platform;\n            me.version = info.version;\n            me.uuid = info.uuid;\n            me.cordova = buildLabel;\n            me.model = info.model;\n            me.isVirtual = info.isVirtual;\n            me.manufacturer = info.manufacturer || 'unknown';\n            me.serial = info.serial || 'unknown';\n            channel.onCordovaInfoReady.fire();\n        },function(e) {\n            me.available = false;\n            utils.alert(\"[ERROR] Error initializing Cordova: \" + e);\n        });\n    });\n}\n\n/**\n * Get device info\n *\n * @param {Function} successCallback The function to call when the heading data is available\n * @param {Function} errorCallback The function to call when there is an error getting the heading data. (OPTIONAL)\n */\nDevice.prototype.getInfo = function(successCallback, errorCallback) {\n    argscheck.checkArgs('fF', 'Device.getInfo', arguments);\n    exec(successCallback, errorCallback, \"Device\", \"getDeviceInfo\", []);\n};\n\nmodule.exports = new Device();\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-device/node_modules/cordova-plugin-device/src/blackberry10/index.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\n/* global PluginResult */\n\nfunction getModelName () {\n    var modelName = window.qnx.webplatform.device.modelName;\n    //Pre 10.2 (meaning Z10 or Q10)\n    if (typeof modelName === \"undefined\") {\n        if (window.screen.height === 720 && window.screen.width === 720) {\n            if ( window.matchMedia(\"(-blackberry-display-technology: -blackberry-display-oled)\").matches) {\n                modelName = \"Q10\";\n            } else {\n                modelName = \"Q5\";\n            }\n        } else if ((window.screen.height === 1280 && window.screen.width === 768) ||\n                   (window.screen.height === 768 && window.screen.width === 1280)) {\n            modelName = \"Z10\";\n        } else {\n            modelName = window.qnx.webplatform.deviceName;\n        }\n    }\n\n    return modelName;\n}\n\nfunction getUUID () {\n    var uuid = \"\";\n    try {\n        //Must surround by try catch because this will throw if the app is missing permissions\n        uuid = window.qnx.webplatform.device.devicePin;\n    } catch (e) {\n        //DO Nothing\n    }\n    return uuid;\n}\n\nmodule.exports = {\n    getDeviceInfo: function (success, fail, args, env) {\n        var result = new PluginResult(args, env),\n            modelName = getModelName(),\n            uuid = getUUID(),\n            info = {\n                manufacturer: 'BlackBerry',\n                platform: \"blackberry10\",\n                version: window.qnx.webplatform.device.scmBundle,\n                model: modelName,\n                uuid: uuid\n            };\n\n        result.ok(info);\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-device/node_modules/cordova-plugin-device/src/browser/DeviceProxy.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n */\nvar browser = require('cordova/platform');\n\nfunction getPlatform() {\n    return \"browser\";\n}\n\nfunction getModel() {\n    return getBrowserInfo(true);\n}\n\nfunction getVersion() {\n    return getBrowserInfo(false);\n}\n\nfunction getBrowserInfo(getModel) {\n    var userAgent = navigator.userAgent;\n    var returnVal = '';\n    var offset;\n\n    if ((offset = userAgent.indexOf('Chrome')) !== -1) {\n        returnVal = (getModel) ? 'Chrome' : userAgent.substring(offset + 7);\n    } else if ((offset = userAgent.indexOf('Safari')) !== -1) {\n        if (getModel) {\n            returnVal = 'Safari';\n        } else {\n            returnVal = userAgent.substring(offset + 7);\n\n            if ((offset = userAgent.indexOf('Version')) !== -1) {\n                returnVal = userAgent.substring(offset + 8);\n            }\n        }\n    } else if ((offset = userAgent.indexOf('Firefox')) !== -1) {\n        returnVal = (getModel) ? 'Firefox' : userAgent.substring(offset + 8);\n    } else if ((offset = userAgent.indexOf('MSIE')) !== -1) {\n        returnVal = (getModel) ? 'MSIE' : userAgent.substring(offset + 5);\n    } else if ((offset = userAgent.indexOf('Trident')) !== -1) {\n        returnVal = (getModel) ? 'MSIE' : '11';\n    }\n\n    if ((offset = returnVal.indexOf(';')) !== -1 || (offset = returnVal.indexOf(' ')) !== -1) {\n        returnVal = returnVal.substring(0, offset);\n    }\n\n    return returnVal;\n}\n\n\nmodule.exports = {\n    getDeviceInfo: function (success, error) {\n        setTimeout(function () {\n            success({\n                cordova: browser.cordovaVersion,\n                platform: getPlatform(),\n                model: getModel(),\n                version: getVersion(),\n                uuid: null\n            });\n        }, 0);\n    }\n};\n\nrequire(\"cordova/exec/proxy\").add(\"Device\", module.exports);\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-device/node_modules/cordova-plugin-device/src/firefoxos/DeviceProxy.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n */\n//example UA String for Firefox OS \n//Mozilla/5.0 (Mobile; rv:26.0) Gecko/26.0 Firefox/26.0\n\n//UA parsing not recommended but currently this is the only way to get the Firefox OS version\n//https://developer.mozilla.org/en-US/docs/Gecko_user_agent_string_reference\n\n//Should be replaced when better conversion to Firefox OS Version is available\nfunction convertVersionNumber(ver) {\n    var hashVersion = {\n        '18.0': '1.0.1',\n        '18.1': '1.1',\n        '26.0': '1.2',\n        '28.0': '1.3',\n        '30.0': '1.4',\n        '32.0': '2.0'\n    };\n    var rver = ver;\n    var sStr = ver.substring(0, 4);\n    if (hashVersion[sStr]) {\n        rver = hashVersion[sStr];\n    }\n    return (rver);\n\n}\nfunction getVersion() {\n    if (navigator.userAgent.match(/(mobile|tablet)/i)) {\n        var ffVersionArray = (navigator.userAgent.match(/Firefox\\/([\\d]+\\.[\\w]?\\.?[\\w]+)/));\n        if (ffVersionArray.length === 2) {\n            return (convertVersionNumber(ffVersionArray[1]));\n        }\n    }\n    return (null);\n}\n\nfunction getModel() {\n    var uaArray = navigator.userAgent.split(/\\s*[;)(]\\s*/);\n    if (navigator.userAgent.match(/(mobile|tablet)/i)) {\n        if (uaArray.length === 5) {\n            return (uaArray[2]);\n        }\n    }\n    return (null);\n}\nmodule.exports = {\n    getDeviceInfo: function (success, error) {\n        setTimeout(function () {\n            success({\n                platform: 'firefoxos',\n                model: getModel(),\n                version: getVersion(),\n                uuid: null\n            });\n        }, 0);\n    }\n};\n\nrequire(\"cordova/exec/proxy\").add(\"Device\", module.exports);\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-device/node_modules/cordova-plugin-device/src/tizen/DeviceProxy.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\nvar tizen = require('cordova/platform');\n\nmodule.exports = {\n    getDeviceInfo: function(success, error) {\n        setTimeout(function () {\n            success({\n                cordova: tizen.cordovaVersion,\n                platform: 'tizen',\n                model: null,\n                version: null,\n                uuid: null\n            });\n        }, 0);\n    }\n};\n\nrequire(\"cordova/tizen/commandProxy\").add(\"Device\", module.exports);\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-device/node_modules/cordova-plugin-device/src/ubuntu/device.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\n/* global Cordova */\n\nmodule.exports = {\n    getInfo:function(win,fail,args) {\n        Cordova.exec(function (model, cordova, platform, uuid, version) {\n            win({name: name, model: model, cordova: cordova,\n                 platform: platform, uuid: uuid, version: version});\n        }, null, \"com.cordova.Device\", \"getInfo\", []);\n    }\n};\n\nrequire(\"cordova/exec/proxy\").add(\"Device\", module.exports);\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-device/node_modules/cordova-plugin-device/src/windows/DeviceProxy.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\n/* global Windows, createUUID */\n\nvar ROOT_CONTAINER = \"{00000000-0000-0000-FFFF-FFFFFFFFFFFF}\";\nvar DEVICE_CLASS_KEY = \"{A45C254E-DF1C-4EFD-8020-67D146A850E0},10\";\nvar DEVICE_CLASS_KEY_NO_SEMICOLON = \"{A45C254E-DF1C-4EFD-8020-67D146A850E0}10\";\nvar ROOT_CONTAINER_QUERY = \"System.Devices.ContainerId:=\\\"\" + ROOT_CONTAINER + \"\\\"\";\nvar HAL_DEVICE_CLASS = \"4d36e966-e325-11ce-bfc1-08002be10318\";\nvar DEVICE_DRIVER_VERSION_KEY = \"{A8B865DD-2E3D-4094-AD97-E593A70C75D6},3\";\n\nmodule.exports = {\n\n    getDeviceInfo:function(win, fail, args) {\n\n        // deviceId aka uuid, stored in Windows.Storage.ApplicationData.current.localSettings.values.deviceId\n        var deviceId;\n        // get deviceId, or create and store one\n        var localSettings = Windows.Storage.ApplicationData.current.localSettings;\n        if (localSettings.values.deviceId) {\n            deviceId = localSettings.values.deviceId;\n        }\n        else {\n            // App-specific hardware id could be used as uuid, but it changes if the hardware changes...\n            try {\n                var ASHWID = Windows.System.Profile.HardwareIdentification.getPackageSpecificToken(null).id;\n                deviceId = Windows.Storage.Streams.DataReader.fromBuffer(ASHWID).readGuid();\n            } catch (e) {\n                // Couldn't get the hardware UUID\n                deviceId = createUUID();\n            }\n            //...so cache it per-install\n            localSettings.values.deviceId = deviceId;\n        }\n\n\n        var userAgent = window.clientInformation.userAgent;\n        // this will report \"windows\" in windows8.1 and windows phone 8.1 apps\n        // and \"windows8\" in windows 8.0 apps similar to cordova.js\n        // See https://github.com/apache/cordova-js/blob/master/src/windows/platform.js#L25\n        var devicePlatform = userAgent.indexOf(\"MSAppHost/1.0\") == -1 ? \"windows\" : \"windows8\";\n        var versionString = userAgent.match(/Windows (?:Phone |NT )?([0-9.]+)/)[1];\n\n        var deviceInfo = new Windows.Security.ExchangeActiveSyncProvisioning.EasClientDeviceInformation();\n        // Running in the Windows Simulator is a remote session.\n        // Running in the Windows Phone Emulator has the systemProductName set to \"Virtual\"\n        var isVirtual = Windows.System.RemoteDesktop.InteractiveSession.isRemote || deviceInfo.systemProductName == \"Virtual\";\n        var manufacturer = deviceInfo.systemManufacturer;\n        var model = deviceInfo.systemProductName;\n\n        var Pnp = Windows.Devices.Enumeration.Pnp;\n\n        Pnp.PnpObject.findAllAsync(Pnp.PnpObjectType.device,\n                                [DEVICE_DRIVER_VERSION_KEY, DEVICE_CLASS_KEY],\n                                ROOT_CONTAINER_QUERY)\n        .then(function (rootDevices) {\n                for (var i = 0; i < rootDevices.length; i++) {\n                    var rootDevice = rootDevices[i];\n                    if (!rootDevice.properties) continue;\n                    if (rootDevice.properties[DEVICE_CLASS_KEY_NO_SEMICOLON] == HAL_DEVICE_CLASS) {\n                        versionString = rootDevice.properties[DEVICE_DRIVER_VERSION_KEY];\n                        break;\n                    }\n                }\n\n                setTimeout(function () {\n                    win({ platform: devicePlatform,\n                          version: versionString,\n                          uuid: deviceId,\n                          isVirtual: isVirtual,\n                          model: model,\n                          manufacturer:manufacturer});\n                }, 0);\n        });\n    }\n\n}; // exports\n\nrequire(\"cordova/exec/proxy\").add(\"Device\", module.exports);\n"}